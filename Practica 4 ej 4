4. Se dispone de un vector con 100 números enteros. Implementar los siguientes módulos:
a. posicion: dado un número X y el vector de números, retorna la posición del número X en dicho
vector, o el valor -1 en caso de no encontrarse.
b. intercambio: recibe dos valores x e y (entre 1 y 100) y el vector de números, y retorna el mismo
vector donde se intercambiaron los valores de las posiciones x e y.
c. sumaVector: retorna la suma de todos los elementos del vector.
d. promedio: devuelve el valor promedio de los elementos del vector.
e. elementoMaximo: retorna la posición del mayor elemento del vector
f. elementoMinimo: retorna la posicion del menor elemento del vector

Const
dimF=100
Type
numeros= Array  [1..dimF]
function moduloA ( x:integer; n:numeros; dimL:integer) : integer
var
pos:integer;
begin
esta := -1;
while(pos<=dimL)and(esta=-1)do begin
  if( x[pos]=x) then begin
     esta:=pos;
  else 
     pos:=pos+1;
  end;
moduloA:= esta;
end;

procedure moduloB(; posx, posy :integer; var n:numeros); 
var
posaux :integer;
begin 
posaux:=posx;
n[posaux]:=n[posx];
posx:=posy;
n[posaux]:=n[posy];
posy:=posaux;
n[posauy]:=n[posaux];
end;

procedure minimo (elem:integer; var min:integer);
var
begin
if(elem<min) then begin
   min:=elem;
  end;
end;

procedure maximo (elem:integer; var max:integer);
var
begin
if(elem>max) then begin
   max:=elem;
  end;
end;

procedure moduloCyDyEyF(var n: numeros; dimL:integer);
var
i,suma,prom,max,min:integer;
begin
max:=-1;
min:=999;
summa:=0;
for i:= 1 to dimL do
begin
   maximo(n[i],max);
   minimo(n[i],min);
   suma:= suma+ n[i];
end;
prom:=suma/dimL;
end;



